apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: vanus-prometheus.yaml
rules:
- apiGroups:
  - ""
  resources:
  - nodes
  - nodes/proxy
  - services
  - endpoints
  - pods
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - extensions
  resources:
  - ingresses
  verbs:
  - get
  - list
  - watch
- nonResourceURLs:
  - /metrics
  verbs:
  - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: vanus-prometheus.yaml
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: vanus-prometheus.yaml
subjects:
- kind: ServiceAccount
  name: default
  namespace: vanus
---
apiVersion: v1
data:
  prometheus.yml: "global:\n  scrape_interval:     15s # Set the scrape interval to
    every 15 seconds. Default is every 1 minute.\n  evaluation_interval: 15s # Evaluate
    rules every 15 seconds. The default is every 1 minute.\n\n# Alertmanager configuration\nalerting:\n
    \ alertmanagers:\n    - static_configs:\n        - targets:\n          # - alertmanager:9093\n\n#
    Here it's Prometheus itself.\nscrape_configs:\n  # The job name is added as a
    label `job=<job_name>` to any timeseries scraped from this config.\n  - job_name:
    'prometheus'    \n    static_configs:\n      - targets: ['localhost:9090']\n  -
    job_name: 'vanus-controller'\n    kubernetes_sd_configs:\n      - role: pod\n
    \   relabel_configs:\n    - source_labels: [__meta_kubernetes_pod_name]\n      regex:
    (^vanus-controller-\\d+)\n      action: keep\n    - source_labels: [__address__,
    __meta_kubernetes_pod_annotation_vanus_dev_metrics_port]\n      action: replace\n
    \     regex: ([^:]+)(?::\\d+)?;(\\d+)\n      replacement: $1:$2\n      target_label:
    __address__\n    - source_labels: [__meta_kubernetes_namespace]\n      regex:
    (^vanus$)\n      action: keep\n  - job_name: 'node-exporter'\n    kubernetes_sd_configs:\n
    \     - role: endpoints\n    relabel_configs:\n    - source_labels: [__meta_kubernetes_endpoints_name]\n
    \     regex: 'node-exporter'\n      action: keep\n    - source_labels: [__meta_kubernetes_namespace]\n
    \     regex: (^vanus$)\n      action: keep"
kind: ConfigMap
metadata:
  name: config-prometheus
  namespace: vanus
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/port: "9100"
    prometheus.io/scrape: "true"
  name: node-exporter
  namespace: vanus
spec:
  ports:
  - name: node-exporter
    port: 9100
    protocol: TCP
    targetPort: 9100
  selector:
    app.kubernetes.io/component: exporter
    app.kubernetes.io/name: node-exporter
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: vanus-grafana
  name: vanus-grafana
  namespace: vanus
spec:
  ports:
  - name: vanus-grafana
    nodePort: 30300
    port: 3000
    targetPort: 3000
  selector:
    app: vanus-grafana
  type: NodePort
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: vanus-prometheus
  name: vanus-prometheus
  namespace: vanus
spec:
  ports:
  - name: vanus-prometheus
    nodePort: 30390
    port: 9090
    targetPort: 9090
  selector:
    app: vanus-prometheus
  type: NodePort
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: vanus-grafana
  name: vanus-grafana
  namespace: vanus
spec:
  replicas: 1
  selector:
    matchLabels:
      app: vanus-grafana
  template:
    metadata:
      labels:
        app: vanus-grafana
    spec:
      containers:
      - image: grafana/grafana
        imagePullPolicy: Always
        name: grafana
        ports:
        - containerPort: 3000
          name: grafana
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: vanus-prometheus
  name: vanus-prometheus
  namespace: vanus
spec:
  replicas: 1
  selector:
    matchLabels:
      app: vanus-prometheus
  template:
    metadata:
      labels:
        app: vanus-prometheus
    spec:
      containers:
      - args:
        - --storage.tsdb.retention.time=12h
        - --config.file=/etc/prometheus/prometheus.yml
        - --storage.tsdb.path=/prometheus/
        image: prom/prometheus
        imagePullPolicy: Always
        name: prometheus
        ports:
        - containerPort: 9090
          name: prometheus
        resources:
          limits:
            cpu: 1
            memory: 1Gi
          requests:
            cpu: 500m
            memory: 500M
        volumeMounts:
        - mountPath: /etc/prometheus
          name: config-prometheus
        - mountPath: /prometheus/
          name: prometheus-storage-volume
      volumes:
      - configMap:
          defaultMode: 420
          name: config-prometheus
        name: config-prometheus
      - emptyDir: {}
        name: prometheus-storage-volume
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  labels:
    app.kubernetes.io/component: exporter
    app.kubernetes.io/name: node-exporter
  name: node-exporter
  namespace: vanus
spec:
  selector:
    matchLabels:
      app.kubernetes.io/component: exporter
      app.kubernetes.io/name: node-exporter
  template:
    metadata:
      labels:
        app.kubernetes.io/component: exporter
        app.kubernetes.io/name: node-exporter
    spec:
      containers:
      - args:
        - --path.sysfs=/host/sys
        - --path.rootfs=/host/root
        - --no-collector.wifi
        - --no-collector.hwmon
        - --collector.filesystem.ignored-mount-points=^/(dev|proc|sys|var/lib/docker/.+|var/lib/kubelet/pods/.+)($|/)
        - --collector.netclass.ignored-devices=^(veth.*)$
        image: prom/node-exporter
        name: node-exporter
        ports:
        - containerPort: 9100
          protocol: TCP
        resources:
          limits:
            cpu: 250m
            memory: 180Mi
          requests:
            cpu: 102m
            memory: 180Mi
        volumeMounts:
        - mountPath: /host/sys
          mountPropagation: HostToContainer
          name: sys
          readOnly: true
        - mountPath: /host/root
          mountPropagation: HostToContainer
          name: root
          readOnly: true
      volumes:
      - hostPath:
          path: /sys
        name: sys
      - hostPath:
          path: /
        name: root
